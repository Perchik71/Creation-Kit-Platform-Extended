// Copyright © 2025 aka perchik71. All rights reserved.
// Contacts: <email:timencevaleksej@gmail.com>
// License: https://www.gnu.org/licenses/lgpl-3.0.html

#include <windows.h>
#include <psapi.h>
#include <cstdlib>
#include <CKPE.Common.KillerGuardMalware.h>
#include <CKPE.Patterns.h>

namespace CKPE
{
	namespace Common
	{
		bool KillerGuardMalware::Kill() const noexcept(true)
		{
			std::uintptr_t address_step = 0x1000;
			std::uintptr_t address = address_step;

			// Поиск всех областей памяти, которые могут быть исполняемые и доступны для записи
			MEMORY_BASIC_INFORMATION mbi;
			while ((address < 0x7FFFFF000000))
			{
				if (!VirtualQuery((LPCVOID)address, std::addressof(mbi), sizeof(mbi)))
					address += address_step;
				else
				{
					if ((mbi.Protect & PAGE_EXECUTE_READWRITE) == PAGE_EXECUTE_READWRITE)
					{
						auto patterns = Patterns::FindsByMask((std::uintptr_t)mbi.BaseAddress, (std::uintptr_t)mbi.RegionSize,
							"48 03 DE 81 3B 4C 8B D1 B8");
						if (patterns.size() == 1)
						{
							// Убераем код, который крашит СК специально
							*((std::uint8_t*)(patterns[0] - 9)) = 0xEB;

							return true;
						}
					}
					address += mbi.RegionSize;
				}
			}
			
			return false;
		}
	}
}